{"version":3,"sources":["components/Fire.js","components/Timer.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["fx","fxProps","count","interval","colors","calc","props","i","x","window","innerWidth","y","Math","random","newYear","Date","now","Timer","state","hours","parseInt","minutes","seconds","resetTimer","setState","this","myInterval","setInterval","clearInterval","Fire","className","onClick","href","Component","API_KEY","Weather","lat","long","main","icon","des","_getWeather","_getCoordinate","fetch","then","res","json","temp","weather","description","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","name","color","src","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69b61c98.chunk.js","sourcesContent":["import React from 'react'\nimport { Fireworks } from 'fireworks'\n\n\nfunction fx() {\n  let fxProps = {\n    count: 3,\n    interval: 800,\n    colors: ['#FFD662FF', '#ff6f69', '#3CAEA3'],\n    calc: (props, i) => ({\n      ...props,\n      x: (i + 1) * (window.innerWidth / 3) - (i + 1) * 100,\n      y: 200 + Math.random() * 100 - 50 + (i === 2 ? -80 : 1)\n    })\n  }\n\n  return (\n    <div>\n      <Fireworks {...fxProps} />\n      <h1>Happy New Year!</h1>\n    </div>\n  )\n}\n\nexport default fx;","import React, { Component } from 'react'\nimport Fire from \"../components/Fire\"\n\nlet newYear = 1609480800000 - Date.now();\n\nclass Timer extends Component {\n\n    state = {\n        hours: parseInt(newYear / 3600000),\n        minutes: parseInt((newYear / 60000) % 60),\n        seconds: parseInt((newYear / 3600000) % 24)\n    }\n\n    componentDidMount() {\n        this.myInterval = setInterval(() => {\n            const { seconds, minutes, hours } = this.state\n\n            if (seconds > 0) {\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    if (hours === 0) {\n\n                        clearInterval(this.myInterval)\n                    }\n                    else {\n                        this.setState(({ hours }) => ({\n                            hours: hours - 1,\n                            minutes: 59,\n                            seconds: 59\n                        }))\n                    }\n                } else {\n                    this.setState(({ minutes }) => ({\n                        minutes: minutes - 1,\n                        seconds: 59\n                    }))\n                }\n\n            }\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n\n    resetTimer = () => {\n        this.setState({\n            hours: 0,\n            minutes: 0,\n            seconds: 0\n        });\n    };\n\n    render() {\n        const { hours, minutes, seconds } = this.state\n\n        return [\n            <h2>New Year</h2>,\n            <div>\n                {hours === 0 && minutes === 0 && seconds === 0\n                    ? <Fire></Fire>\n                    : <h1>{hours < 10 ? `0${hours}` : hours} : {minutes < 10 ? `0${minutes}` : minutes} : {seconds < 10 ? `0${seconds}` : seconds}\n                    </h1>\n                }\n                <button className=\"button2\" onClick={this.resetTimer}>./Warp</button>\n                <a href=\"https://github.com/init-JaeminKim/NewYear-Timer\"><button>source code</button></a>\n            </div>\n        ]\n    }\n}\n\nexport default Timer;","import React, { Component } from 'react'\nimport '../css/Weather.css'\nimport Spinner from 'react-spinkit'\n\nconst API_KEY = \"63cab6d946b12c02de546fe2d28b9370\";\n\n\nexport default class Weather extends Component {\n\n    state = {\n        lat: null,\n        long: null,\n        main: '',\n        icon: '',\n        des: '',\n    }\n\n    componentDidMount() {\n        this._getWeather();\n    }\n    render() {\n        const { des, main, icon, lat, long } = this.state;\n\n        return (\n            <div className=\"Weather\">\n                {lat === null || long == null\n                    ? <Spinner className=\"Loading\" name=\"line-scale\" color=\"rgb(252, 237, 210)\"/>\n                    : <div className=\"row\">\n                        <h3 className=\"block fade-in\">{main}Â°F</h3>\n                        <img className=\"block fade-in\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`}></img>\n                        <h3 className=\"block fade-in\">{des}</h3>\n                    </div>\n                }\n            </div>\n\n        )\n    }\n\n    _getWeather = () => {\n\n        this._getCoordinate();\n        fetch(`http://api.openweathermap.org/data/2.5/weather?lat=35&lon=139&units=imperial&appid=${API_KEY}`)\n            .then(res => res.json())\n            .then((json) => {\n                this.setState({\n                    main: json.main.temp,\n                    icon: json.weather[0].icon,\n                    des: json.weather[0].description\n                })\n            })\n    }\n\n    _getCoordinate = () => {\n        navigator.geolocation.getCurrentPosition(position => {\n            this.setState({\n                lat: position.coords.latitude,\n                long: position.coords.longitude,\n            });\n        })\n    }\n}","import React, { Component } from 'react';\nimport Timer from \"./components/Timer\"\nimport './App.css';\nimport Weather from './components/Weather.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <Weather></Weather>\n        </div>\n        <div className=\"App\">\n          <Timer></Timer>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}